/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Administrador.Ventanas;

import PuntoVenta.BaseDatos.ObjetoBaseDatos;
import PuntoVenta.BaseDatos.Pais;
import PuntoVenta.Inicio.MenuPrincipal;
import PuntoVenta.Modelos.ModeloCliente;
import PuntoVenta.Ventanas.Venta;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

/**
 * Los campos de telefono y redes sociales aun no se guardan. Nota: El telefono
 * se debe guardar en la tabla de telefonos y relacionarlo al empleado.
 *
 * @author Programador01
 */
//¿?¿?¿?¿?¿?¿
public class RegistroCliente extends javax.swing.JInternalFrame {

    private Admin admin;
    private Venta venta;
    private ObjetoBaseDatos obd;
    private final boolean modificarCliente;
    private String tipo_persona;
    private String numero_identificacion_persona;

    /**
     * Crea una ventana de RegistroCliente
     * para uso por el módulo de administración
     *
     * @param admin Ventana de admin.
     */
    public RegistroCliente(Admin admin) {
        initComponents();
        this.admin = admin;
        this.obd = admin.menuPrincipal.getOBD();
        this.setTitle("Saphiro - Registro clientes");
        modificarCliente = false;
        crearHotKeys();
        identificarPais();
    }
    
    /**
     * Crea una ventana de RegistroCliente
     * para uso por el módulo de ventas
     * 
     * @param venta Ventana de venta.
     */
    public RegistroCliente(Venta venta) {
        initComponents();
        this.venta = venta;
        this.obd = venta.menuPrincipal.getOBD();
        txtDocumento.setEnabled(false);
        cmbTipoIdentificacion.setEnabled(false);
        cmbTipoIdentificacion.removeAllItems();
        cmbTipoIdentificacion.addItem(venta.cmbTipoDocumento.getSelectedItem());
        txtDocumento.setText(venta.txtDocumento.getText());
        modificarCliente = false;
        crearHotKeys();
        identificarPais();
    }

    /**
     * Crea una ventana de RegistroCliente
     * para uso por el módulo de administración
     * 
     * @param admin Ventana de admin.
     * @param tipo_persona Indicador del combobox. J,V,E,P.
     * @param numero_identificacion_persona Cedula, RIF o número de pasaporte de la persona
     * @param modificarCliente Indica si la ventana es de registro (false) o modificación (true).
     */
    public RegistroCliente(Admin admin, String tipo_persona, String numero_identificacion_persona, boolean modificarCliente) {
        initComponents();
        this.admin = admin;
        this.obd = admin.menuPrincipal.getOBD();
        this.modificarCliente = modificarCliente;
        crearHotKeys();
        identificarPais();
        cmbTipoIdentificacion.setSelectedItem(String.valueOf(tipo_persona));
        txtDocumento.setText(numero_identificacion_persona);
        

        if(modificarCliente) {
            setTitle("Saphiro - Modificar cliente");
            btnRegistrarEmpleados.setText("<html><center>Modificar<br>F2</center></html>");
            setCliente(tipo_persona, numero_identificacion_persona);
        }
    }
    
    /**
     * Crea una ventana de RegistroCliente
     * para uso por el módulo de ventas
     * 
     * @param venta Ventana de venta.
     * @param tipo_persona Indicador del combobox. J,V,E,P.
     * @param numero_identificacion_persona Cedula, RIF o número de pasaporte de la persona
     */
    public RegistroCliente(Venta venta, char tipo_persona, String numero_identificacion_persona) {
        initComponents();
        this.venta = venta;
        this.obd = venta.menuPrincipal.getOBD();
        modificarCliente = false;
        crearHotKeys();
        cmbTipoIdentificacion.setSelectedItem(String.valueOf(tipo_persona));
        txtDocumento.setText(numero_identificacion_persona);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlContenedor = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblDocumento = new javax.swing.JLabel();
        cmbTipoIdentificacion = new javax.swing.JComboBox();
        txtDocumento = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        lblApellido = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        lblCorreo = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDireccion = new javax.swing.JTextArea();
        lblDireccion = new javax.swing.JLabel();
        btnRegistrarEmpleados = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setClosable(true);

        pnlContenedor.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(326, 296));

        lblDocumento.setBackground(new java.awt.Color(255, 255, 255));
        lblDocumento.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lblDocumento.setForeground(new java.awt.Color(28, 90, 125));
        lblDocumento.setText("CI / RIF:");

        cmbTipoIdentificacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "E" }));
        cmbTipoIdentificacion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 182, 155), 1, true));
        cmbTipoIdentificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoIdentificacionActionPerformed(evt);
            }
        });

        txtDocumento.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtDocumento.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 182, 155), 1, true));
        txtDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocumentoActionPerformed(evt);
            }
        });
        txtDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDocumentoKeyTyped(evt);
            }
        });

        lblNombre.setBackground(new java.awt.Color(255, 255, 255));
        lblNombre.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lblNombre.setForeground(new java.awt.Color(28, 90, 125));
        lblNombre.setText("Nombre:");

        txtNombres.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtNombres.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 182, 155), 1, true));
        txtNombres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombresActionPerformed(evt);
            }
        });
        txtNombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombresKeyTyped(evt);
            }
        });

        txtApellido.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtApellido.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 182, 155), 1, true));
        txtApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidoKeyTyped(evt);
            }
        });

        lblApellido.setBackground(new java.awt.Color(255, 255, 255));
        lblApellido.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lblApellido.setForeground(new java.awt.Color(28, 90, 125));
        lblApellido.setText("Apellido:");

        lblTelefono.setBackground(new java.awt.Color(255, 255, 255));
        lblTelefono.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lblTelefono.setForeground(new java.awt.Color(28, 90, 125));
        lblTelefono.setText("Teléfono:");

        txtTelefono.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtTelefono.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 182, 155), 1, true));
        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });

        lblCorreo.setBackground(new java.awt.Color(255, 255, 255));
        lblCorreo.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lblCorreo.setForeground(new java.awt.Color(28, 90, 125));
        lblCorreo.setText("Correo:");

        txtCorreo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtCorreo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 182, 155), 1, true));
        txtCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCorreoActionPerformed(evt);
            }
        });
        txtCorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCorreoKeyTyped(evt);
            }
        });

        txtDireccion.setColumns(20);
        txtDireccion.setRows(5);
        txtDireccion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(32, 182, 155), 1, true));
        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDireccionKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtDireccion);

        lblDireccion.setBackground(new java.awt.Color(255, 255, 255));
        lblDireccion.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        lblDireccion.setForeground(new java.awt.Color(28, 90, 125));
        lblDireccion.setText("Dirección:");

        btnRegistrarEmpleados.setBackground(new java.awt.Color(32, 182, 155));
        btnRegistrarEmpleados.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnRegistrarEmpleados.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrarEmpleados.setText("<html><center>Registrar<br>F2</center></html>");
        btnRegistrarEmpleados.setBorder(null);
        btnRegistrarEmpleados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarEmpleadosActionPerformed(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PuntoVenta/Iconos/iconos p_v 24x24/cuadro2-400x400.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTelefono)
                                    .addComponent(lblCorreo))
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtCorreo, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                                        .addComponent(txtTelefono))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblNombre)
                                .addGap(44, 44, 44)
                                .addComponent(txtNombres))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbTipoIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(btnRegistrarEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(34, 34, 34)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDocumento)
                    .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTipoIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApellido))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefono)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCorreo)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblDireccion))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnRegistrarEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)))
        );

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(28, 90, 125));
        jLabel11.setText("Obligatorios");

        javax.swing.GroupLayout pnlContenedorLayout = new javax.swing.GroupLayout(pnlContenedor);
        pnlContenedor.setLayout(pnlContenedorLayout);
        pnlContenedorLayout.setHorizontalGroup(
            pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContenedorLayout.createSequentialGroup()
                .addGroup(pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlContenedorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlContenedorLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlContenedorLayout.setVerticalGroup(
            pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContenedorLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContenedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContenedor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarEmpleadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarEmpleadosActionPerformed
        if(modificarCliente) modificarCliente();
        else registrarCliente();
        if(admin != null) {
            admin.actualizarTabla();
            System.out.println("se cumplio la condicion de actualizar tabla");
        }
    }//GEN-LAST:event_btnRegistrarEmpleadosActionPerformed


    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        if ((txtTelefono.getText().length() > 15) || ((!Character.isDigit(evt.getKeyChar()) && (evt.getKeyChar() != '-') && (evt.getKeyChar() != '+')))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    /*
    public static boolean emailValido(String email)
    {
        boolean esValido = false;
        
        String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
        CharSequence inputStr = email;
        
        Pattern pattern = Pattern.compile(expression,Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(inputStr);
        if(matcher.matches())
        {
            esValido = true;
        }
        
        return esValido;
    }*/

    private void txtCorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCorreoKeyTyped
        /*
        char aux=evt.getKeyChar();
        String str=null;
        int e=0;
        try{
            e=txtDocumento.getText().length();
        }catch(Exception E){
            
        }
        
        System.out.println(e);
         */
        //if(!Character.isDigit(aux) || e==8) evt.consume();

    }//GEN-LAST:event_txtCorreoKeyTyped

    private void txtCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCorreoActionPerformed
        /*boolean esValido = false;
        
        String expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$";
        CharSequence email = null;
        CharSequence inputStr = email;
        
   
        
        Pattern pattern = Pattern.compile(expression,Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(inputStr);
        if(matcher.matches())
        {
            esValido = true;
        }
         */
    }//GEN-LAST:event_txtCorreoActionPerformed

    private void txtApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoKeyTyped
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "Error: Solo se aceptan letras.");

        }

    }//GEN-LAST:event_txtApellidoKeyTyped

    private void txtNombresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombresKeyTyped
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "Error: Solo se aceptan letras.");
        }
    }//GEN-LAST:event_txtNombresKeyTyped

    private void txtNombresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombresActionPerformed

    private void txtDocumentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocumentoKeyTyped
        /*

        char c=evt.getKeyChar();

        if(Character.isDigit(c) || evt.getKeyCode()==KeyEvent.VK_ENTER);
        else
        {
            evt.consume();
            JOptionPane.showMessageDialog(this, "Error: Solo se aceptan numeros.");
        }

         */

    }//GEN-LAST:event_txtDocumentoKeyTyped

    private void txtDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocumentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocumentoActionPerformed

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void cmbTipoIdentificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoIdentificacionActionPerformed
//        txtApellido.setVisible(!cmbTipoIdentificacion.getSelectedItem().equals("J"));
//        lblApellido.setVisible(!cmbTipoIdentificacion.getSelectedItem().equals("J"));
    }//GEN-LAST:event_cmbTipoIdentificacionActionPerformed

    private void txtDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionKeyTyped
        if (txtDireccion.getText().length() > 100) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDireccionKeyTyped
    
    //identifica el pais y lo asigna al combobox
    public void identificarPais() {
        //Obteniendo el pais seleccionado
        Pais p = this.obd.getDatosPais(" WHERE activo = true");
        
        //asignando identificaicon al combo.
        cmbTipoIdentificacion.insertItemAt(p.getNacionalidad(), 0);
        cmbTipoIdentificacion.setSelectedIndex(0);
    }    
    
    
    private void crearHotKeys() {
        Action actCerrarVentana = new AbstractAction("actionCerrarVentanaCaja") {
            @Override
            public void actionPerformed(ActionEvent e) {
                cerrarVentana();
            }
        };
        Action actRegistrar = new AbstractAction("actionRegistrar") {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(modificarCliente) modificarCliente();
                else registrarCliente();
            }
        };

        actCerrarVentana.putValue(Action.ACTION_COMMAND_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_Q, ActionEvent.ALT_MASK));
        actRegistrar.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0));

        pnlContenedor.getActionMap().put("actionCerrarVentanaCaja", actCerrarVentana);
        pnlContenedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put((KeyStroke) actCerrarVentana.getValue(Action.ACTION_COMMAND_KEY), "actionCerrarVentanaCaja");

        pnlContenedor.getActionMap().put("actionRegistrar", actRegistrar);
        pnlContenedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put((KeyStroke) actRegistrar.getValue(Action.ACCELERATOR_KEY), "actionRegistrar");

        InternalFrameAdapter listener = new InternalFrameAdapter() {
            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                try {
                    if(admin != null) admin.getTxtDocumento().requestFocus();
                    else venta.getTxtDocumento().requestFocus();
                } catch (Exception E) {
//                    System.out.println(E);
                }
            }
        };

        this.addInternalFrameListener(listener);

    }

    private void cerrarVentana() {
        this.dispose();
    }
    
    private void setCliente(String tipo_persona, String numero_identificacion_persona){
        this.tipo_persona = tipo_persona;
        this.numero_identificacion_persona = numero_identificacion_persona;
        
        HashMap<String, String> clienteSeleccionado = obd.getMapPersona(tipo_persona, numero_identificacion_persona);
        
        txtNombres.setText(clienteSeleccionado.get("nombre_persona"));
        txtApellido.setText(clienteSeleccionado.get("apellido_persona"));
        txtTelefono.setText(clienteSeleccionado.get("telefono_persona"));
        txtCorreo.setText(clienteSeleccionado.get("email_persona"));
        txtDireccion.setText(clienteSeleccionado.get("direccion_persona"));
    }

    private void registrarCliente() {
        String nombre, apellido, numero_identificacion, direccion, telefono, email, tipo;
        int idCliente;
        
        nombre = txtNombres.getText();
        apellido = txtApellido.getText();
        tipo = cmbTipoIdentificacion.getSelectedItem().toString();
        numero_identificacion = txtDocumento.getText();
        direccion = txtDireccion.getText();
        telefono = txtTelefono.getText();
        email = txtCorreo.getText();
        
        if (numero_identificacion.isEmpty()) {
            Utilidades.Sonidos.beep();
            txtDocumento.requestFocus();
            return;
        }
        if (nombre.isEmpty()) {
            Utilidades.Sonidos.beep();
            txtNombres.requestFocus();
            return;
        }
        if (apellido.isEmpty() && !cmbTipoIdentificacion.getSelectedItem().toString().equalsIgnoreCase("J")) {
            Utilidades.Sonidos.beep();
            txtApellido.requestFocus();
            return;
        }
        if (direccion.isEmpty()) {
            Utilidades.Sonidos.beep();
            txtDireccion.requestFocus();
            return;
        }
        
        idCliente = obd.crearPersona(nombre, apellido, tipo, numero_identificacion, direccion, telefono, email, false);

        if (idCliente > 0) {
            
            this.cerrarVentana();
            
            if(venta != null) {
                venta.crearVenta(tipo, numero_identificacion);
                venta.getCmbTipoDocumento().setSelectedItem(String.valueOf(tipo));
                venta.getTxtDocumento().setText(numero_identificacion);
            }
        } else {
            Utilidades.Sonidos.beep();
        }
    }
    
    private void modificarCliente() {
        String numero_identificacion, nombre, apellido, telefono, correo, direccion, nacionalidad;
        boolean clienteModificado;
        
        nombre = txtNombres.getText();
        apellido = txtApellido.getText();
        nacionalidad = cmbTipoIdentificacion.getSelectedItem().toString();
        numero_identificacion = txtDocumento.getText();
        direccion = txtDireccion.getText();
        telefono = txtTelefono.getText();
        correo = txtCorreo.getText();
        
        if (numero_identificacion.isEmpty()) {
            Utilidades.Sonidos.beep();
            txtDocumento.requestFocus();
            return;
        }
        if (nombre.isEmpty()) {
            Utilidades.Sonidos.beep();
            txtNombres.requestFocus();
            return;
        }
        if (apellido.isEmpty() && !cmbTipoIdentificacion.getSelectedItem().toString().equalsIgnoreCase("J")) {
            Utilidades.Sonidos.beep();
            txtApellido.requestFocus();
            return;
        }
        if (direccion.isEmpty()) {
            Utilidades.Sonidos.beep();
            txtDireccion.requestFocus();
            return;
        }

        clienteModificado = admin.menuPrincipal.getOBD().actualizarCliente(nombre, apellido, nacionalidad, 
                numero_identificacion, telefono, correo, direccion, this.numero_identificacion_persona, this.tipo_persona);
        // si es false se modificó
        if (clienteModificado == true) {
            this.cerrarVentana();
        } else {
            Utilidades.Sonidos.beep();
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrarEmpleados;
    private javax.swing.JComboBox cmbTipoIdentificacion;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblDocumento;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JPanel pnlContenedor;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextArea txtDireccion;
    private javax.swing.JTextField txtDocumento;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    /*
    private void emailValido() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }*/
}
