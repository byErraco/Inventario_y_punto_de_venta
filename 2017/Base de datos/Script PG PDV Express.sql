-- MySQL Script generated by MySQL Workbench
-- mi√© 21 feb 2018 15:39:39 -04
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

/* SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; */
/* SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; */
/* SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES'; */

-- -----------------------------------------------------
-- Schema public
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema public
-- -----------------------------------------------------
--CREATE SCHEMA IF NOT EXISTS punto--DEFAULT CHARACTER SET latin1 COLLATE latin1_spanish_ci ;
--USE punto;

-- -----------------------------------------------------
-- Table `public`.`caja`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.caja (
  id_caja INT NOT NULL,
  descripcion_caja VARCHAR(45) NOT NULL,
  estado_caja VARCHAR(45) NOT NULL,
  PRIMARY KEY (id_caja))
;


-- -----------------------------------------------------
-- Table `public`.`corte_caja`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.corte_caja (
  id_corte_caja INT NOT NULL,
  fecha_apertura VARCHAR(45) NOT NULL,
  fecha_cierre VARCHAR(45) NOT NULL,
  monto_apertura DECIMAL(10,0) NOT NULL,
  monto_cierre DECIMAL(10,0) NOT NULL,
  monto_fisico DECIMAL(10,0) NOT NULL,
  monto_sistema DECIMAL(10,0) NOT NULL,
  excedente_caja DECIMAL(10,0) NOT NULL,
  restante_caja DECIMAL(10,0) NOT NULL,
  estado_corte_caja VARCHAR(45) NOT NULL,
  caja_id_caja INT NOT NULL,
  PRIMARY KEY (id_corte_caja)
 ,
  CONSTRAINT fk_corte_caja_caja
    FOREIGN KEY (caja_id_caja)
    REFERENCES public.caja (id_caja)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_corte_caja_caja_idx ON public.corte_caja (caja_id_caja ASC);


-- -----------------------------------------------------
-- Table `public`.`desglose_caja`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.desglose_caja (
  id_desglose_caja INT NOT NULL,
  monto_desglose_caja DECIMAL(10,0) NOT NULL,
  tipo_pago_desglose VARCHAR(45) NOT NULL,
  corte_caja_id_corte_caja INT NOT NULL,
  PRIMARY KEY (id_desglose_caja)
 ,
  CONSTRAINT fk_desglose_caja_corte_caja1
    FOREIGN KEY (corte_caja_id_corte_caja)
    REFERENCES public.corte_caja (id_corte_caja)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_desglose_caja_corte_caja1_idx ON public.desglose_caja (corte_caja_id_corte_caja ASC);


-- -----------------------------------------------------
-- Table `public`.`departamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.departamento (
  id_departamento INT NOT NULL,
  nombre_departamento VARCHAR(45) NOT NULL,
  activo_departamento SMALLINT NOT NULL,
  PRIMARY KEY (id_departamento))
;


-- -----------------------------------------------------
-- Table `public`.`cargo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.cargo (
  id_cargo INT NOT NULL,
  nombre_cargo VARCHAR(45) NOT NULL,
  activo_cargo VARCHAR(45) NOT NULL,
  departamento_id_departamento INT NOT NULL,
  PRIMARY KEY (id_cargo)
 ,
  CONSTRAINT fk_cargo_departamento1
    FOREIGN KEY (departamento_id_departamento)
    REFERENCES public.departamento (id_departamento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_cargo_departamento1_idx ON public.cargo (departamento_id_departamento ASC);


-- -----------------------------------------------------
-- Table `public`.`empleado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.empleado (
  id_empleado INT NOT NULL,
  activo_empleado SMALLINT NOT NULL,
  cargo_id_cargo INT NOT NULL,
  PRIMARY KEY (id_empleado)
 ,
  CONSTRAINT fk_empleado_cargo1
    FOREIGN KEY (cargo_id_cargo)
    REFERENCES public.cargo (id_cargo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_empleado_cargo1_idx ON public.empleado (cargo_id_cargo ASC);


-- -----------------------------------------------------
-- Table `public`.`venta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.venta (
  id_venta INT NOT NULL,
  total_previo_venta DECIMAL(10,0) NOT NULL,
  impuesto_venta DECIMAL(10,0) NOT NULL,
  total_exento DECIMAL(10,0) NOT NULL,
  abono_venta DECIMAL(10,0) NOT NULL,
  total_venta DECIMAL(10,0) NOT NULL,
  cambio_venta DECIMAL(10,0) NOT NULL,
  codigo_factura VARCHAR(45) NOT NULL,
  fecha_venta VARCHAR(45) NOT NULL,
  estado_venta VARCHAR(45) NOT NULL,
  corte_caja_id_corte_caja INT NOT NULL,
  PRIMARY KEY (id_venta)
 ,
  CONSTRAINT fk_venta_corte_caja1
    FOREIGN KEY (corte_caja_id_corte_caja)
    REFERENCES public.corte_caja (id_corte_caja)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_venta_corte_caja1_idx ON public.venta (corte_caja_id_corte_caja ASC);


-- -----------------------------------------------------
-- Table `public`.`persona`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.persona (
  id_persona INT NOT NULL,
  nombre_persona VARCHAR(45) NOT NULL,
  apellido_persona VARCHAR(45) NOT NULL,
  cedula_persona VARCHAR(45) NOT NULL,
  direccion_persona VARCHAR(45) NOT NULL,
  nacionalidad_persona VARCHAR(1) NOT NULL,
  email_persona VARCHAR(45) NULL,
  telefono_persona VARCHAR(45) NOT NULL,
  twitter_persona VARCHAR(45) NULL,
  facebook_persona VARCHAR(45) NULL,
  empleado_id_empleado INT NOT NULL,
  venta_id_venta INT NOT NULL,
  PRIMARY KEY (id_persona)
 ,
  CONSTRAINT fk_persona_empleado1
    FOREIGN KEY (empleado_id_empleado)
    REFERENCES public.empleado (id_empleado)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_persona_venta1
    FOREIGN KEY (venta_id_venta)
    REFERENCES public.venta (id_venta)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_persona_empleado1_idx ON public.persona (empleado_id_empleado ASC);
CREATE INDEX fk_persona_venta1_idx ON public.persona (venta_id_venta ASC);


-- -----------------------------------------------------
-- Table `public`.`venta_producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.venta_producto (
  id_venta_producto INT NOT NULL,
  cantidad_producto VARCHAR(45) NOT NULL,
  venta_id_venta INT NOT NULL,
  PRIMARY KEY (id_venta_producto)
 ,
  CONSTRAINT fk_venta_producto_venta1
    FOREIGN KEY (venta_id_venta)
    REFERENCES public.venta (id_venta)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_venta_producto_venta1_idx ON public.venta_producto (venta_id_venta ASC);


-- -----------------------------------------------------
-- Table `public`.`pago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.pago (
  id_pago INT NOT NULL,
  monto_pago DECIMAL(10,0) NOT NULL,
  fecha_pago VARCHAR(45) NOT NULL,
  venta_producto_id_venta_producto INT NOT NULL,
  PRIMARY KEY (id_pago)
 ,
  CONSTRAINT fk_pago_venta_producto1
    FOREIGN KEY (venta_producto_id_venta_producto)
    REFERENCES public.venta_producto (id_venta_producto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_pago_venta_producto1_idx ON public.pago (venta_producto_id_venta_producto ASC);


-- -----------------------------------------------------
-- Table `public`.`tipo_pago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.tipo_pago (
  id_tipo_pago INT NOT NULL,
  descripcion_pago VARCHAR(45) NOT NULL,
  activo_tipo_pago VARCHAR(45) NOT NULL,
  pago_id_pago INT NOT NULL,
  PRIMARY KEY (id_tipo_pago)
 ,
  CONSTRAINT fk_tipo_pago_pago1
    FOREIGN KEY (pago_id_pago)
    REFERENCES public.pago (id_pago)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_tipo_pago_pago1_idx ON public.tipo_pago (pago_id_pago ASC);


-- -----------------------------------------------------
-- Table `public`.`inventario_producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.inventario_producto (
  idi_nventario_producto INT NOT NULL,
  fecha_ingreso_producto VARCHAR(45) NOT NULL,
  cantidad_ingreso_producto DECIMAL(10,0) NOT NULL,
  cantidad_disponible DECIMAL(10,0) NOT NULL,
  stock_minimo DECIMAL(10,0) NOT NULL,
  stock_maximo DECIMAL(10,0) NOT NULL,
  balanza DECIMAL(10,0) NOT NULL,
  balanza_unidad DECIMAL(10,0) NOT NULL,
  PRIMARY KEY (idi_nventario_producto))
;


-- -----------------------------------------------------
-- Table `public`.`producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS public.producto (
  id_producto INT NOT NULL,
  nombre_producto VARCHAR(45) NOT NULL,
  descripcion_producto VARCHAR(45) NOT NULL,
  codigo_barra VARCHAR(45) NOT NULL,
  limite_venta_persona DECIMAL(10,0) NOT NULL,
  costo_unidad DECIMAL(10,0) NOT NULL,
  margen_ganancia DECIMAL(10,0) NOT NULL,
  impuesto_producto DECIMAL(10,0) NOT NULL,
  precio_venta_publico VARCHAR(45) NOT NULL,
  periodo_venta_persona DECIMAL(10,0) NOT NULL,
  descripcion_empaque VARCHAR(45) NOT NULL,
  base_imponible DECIMAL(10,0) NOT NULL,
  activo_producto SMALLINT NOT NULL,
  venta_producto_id_venta_producto INT NOT NULL,
  inventario_producto_idi_nventario_producto INT NOT NULL,
  PRIMARY KEY (id_producto)
 ,
  CONSTRAINT fk_producto_venta_producto1
    FOREIGN KEY (venta_producto_id_venta_producto)
    REFERENCES public.venta_producto (id_venta_producto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_producto_inventario_producto1
    FOREIGN KEY (inventario_producto_idi_nventario_producto)
    REFERENCES public.inventario_producto (idi_nventario_producto)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

CREATE INDEX fk_producto_venta_producto1_idx ON public.producto (venta_producto_id_venta_producto ASC);
CREATE INDEX fk_producto_inventario_producto1_idx ON public.producto (inventario_producto_idi_nventario_producto ASC);


/* SET SQL_MODE=@OLD_SQL_MODE; */
/* SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; */
/* SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS; */